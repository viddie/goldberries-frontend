{
  "openapi": "3.1.0",
  "info": {
    "title": "goldberries.net",
    "summary": "This is the API documentation for goldberries.net",
    "description": "longer description",
    "contact": {
      "name": "Modded Golden Team",
      "url": "https://discord.gg/GeJvmMycaC"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://goldberries.net/api"
    },
    {
      "url": "http://localhost/api"
    }
  ],
  "tags": [
    {
      "name": "Campaign"
    },
    {
      "name": "Map"
    },
    {
      "name": "Challenge"
    },
    {
      "name": "Submission"
    },
    {
      "name": "Player"
    },
    {
      "name": "Objective"
    },
    {
      "name": "Difficulty"
    },
    {
      "name": "Suggestion"
    },
    {
      "name": "Change"
    },
    {
      "name": "Showcase"
    },
    {
      "name": "Lists"
    },
    {
      "name": "Search"
    },
    {
      "name": "Stats"
    }
  ],
  "paths": {
    "/campaign": {
      "get": {
        "summary": "Retrieve a campaign or a list of campaigns",
        "tags": ["Campaign"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the campaign to retrieve.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maps",
            "in": "query",
            "description": "Whether to include maps in the response",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "challenges",
            "in": "query",
            "description": "Whether to include challenges in the response",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "submissions",
            "in": "query",
            "description": "Whether to include submissions in the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Campaign"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Campaign"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Campaign not found"
          }
        }
      },
      "post": {
        "summary": "Create or update a campaign",
        "tags": ["Campaign"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Campaign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "401": {
            "description": "Not logged in"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a campaign",
        "tags": ["Campaign"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the campaign to delete.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing ID"
          },
          "401": {
            "description": "Not logged in"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Campaign not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/campaign/view": {
      "get": {
        "summary": "Retrieve detailed campaign view",
        "tags": ["Campaign"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "campaign": {
                      "$ref": "#/components/schemas/Campaign"
                    },
                    "players": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "player": {
                            "$ref": "#/components/schemas/Player"
                          },
                          "stats": {
                            "type": "object",
                            "properties": {
                              "clears": {
                                "type": "integer"
                              },
                              "full_clears": {
                                "type": "integer"
                              },
                              "major_sort_clears": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "object",
                                  "properties": {
                                    "clears": {
                                      "type": "integer"
                                    },
                                    "full_clears": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "last_submission": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "highest_lobby_sweep": {
                            "type": "integer"
                          },
                          "highest_lobby_sweep_fcs": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid required parameter"
          },
          "404": {
            "description": "Campaign not found"
          }
        }
      }
    },
    "/campaign/view-player": {
      "get": {
        "summary": "Retrieve all submissions for all maps in a campaign for a player",
        "tags": ["Campaign"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "player_id",
            "in": "query",
            "description": "Player ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response. Result is an objective with `map_id => map object`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/Map"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid required parameter"
          },
          "404": {
            "description": "Campaign or player not found"
          }
        }
      }
    },
    "/map": {
      "get": {
        "summary": "Retrieve a map or a list of maps",
        "tags": ["Map"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the map to retrieve.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "challenges",
            "in": "query",
            "description": "Whether to include challenges in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "submissions",
            "in": "query",
            "description": "Whether to include submissions in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Map"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Map"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid required parameter"
          },
          "404": {
            "description": "Map not found"
          }
        }
      },
      "post": {
        "summary": "Create or update maps",
        "tags": ["Map"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Map"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Map"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Map created or updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Map"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Map"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid campaign_id or map data"
          },
          "401": {
            "description": "Not logged in"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a map",
        "tags": ["Map"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the map to delete.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Map deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Map"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid id"
          },
          "401": {
            "description": "Not logged in"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Map not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/map/rejected": {
      "get": {
        "summary": "Retrieve all rejected maps",
        "tags": ["Map"],
        "responses": {
          "200": {
            "description": "A list of rejected maps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Map"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/challenge": {
      "get": {
        "summary": "Retrieve a challenge or a list of challenges",
        "tags": ["Challenge"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the challenge to retrieve."
          },
          {
            "name": "submissions",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Whether to include submissions in the response."
          },
          {
            "name": "depth",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 3
            },
            "description": "The depth of foreign key expansion."
          }
        ],
        "responses": {
          "200": {
            "description": "A challenge or a list of challenges",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Challenge"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Challenge"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create or update a challenge",
        "tags": ["Challenge"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created or updated challenge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a challenge",
        "tags": ["Challenge"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the challenge to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted challenge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/challenge/paginated": {
      "get": {
        "summary": "Retrieve paginated challenges with optional search and sorting",
        "tags": ["Challenge"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The page number to retrieve."
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "The number of challenges per page."
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter challenges by campaign or map names."
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Field to sort challenges by (e.g., 'date_created', 'label')."
          },
          {
            "name": "sort_dir",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "description": "Direction to sort the challenges (ascending or descending)."
          },
          {
            "name": "depth",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 3
            },
            "description": "The depth of foreign key expansion."
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of challenges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChallenges"
                }
              }
            }
          }
        }
      }
    },
    "/submission": {
      "get": {
        "tags": ["Submission"],
        "summary": "Retrieve a submission",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID of the submission to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the submission data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submission"
                }
              }
            }
          },
          "404": {
            "description": "Submission not found"
          }
        }
      },
      "post": {
        "tags": ["Submission"],
        "summary": "Create or update a submission",
        "requestBody": {
          "description": "Submission object to update, or create if `id` is omitted",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Submission"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Submission created/updated successfully"
          },
          "400": {
            "description": "Invalid submission object"
          },
          "404": {
            "description": "Submission not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": ["Submission"],
        "summary": "Delete a submission by ID",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID of the submission to delete",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submission deleted successfully"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Submission not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/submission/queue": {
      "get": {
        "tags": ["Submission"],
        "summary": "Get a list of unverified submissions",
        "description": "Returns a list of unverified submissions in order of submission date",
        "responses": {
          "200": {
            "description": "A list of unverified submissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submission"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/submission/recent": {
      "get": {
        "tags": ["Submission"],
        "summary": "Get a list of recent submissions",
        "description": "Returns a paginated list of recent submissions with optional filters",
        "parameters": [
          {
            "name": "verified",
            "in": "query",
            "required": false,
            "description": "Filter submissions based on their verification status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "The page number to retrieve",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "The number of submissions per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "description": "Search term to filter submissions",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "player",
            "in": "query",
            "required": false,
            "description": "Filter submissions by player ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of recent submissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSubmissions"
                }
              }
            }
          }
        }
      }
    },
    "/player": {
      "get": {
        "summary": "Retrieve player details",
        "tags": ["Player"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the player to retrieve."
          },
          {
            "name": "customization",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Whether to include profile customization details."
          }
        ],
        "responses": {
          "200": {
            "description": "Player details successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create or update a player",
        "tags": ["Player"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Player"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Player successfully created or updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, missing or invalid parameters"
          },
          "401": {
            "description": "Unauthorized, not logged in"
          },
          "403": {
            "description": "Forbidden, not authorized"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a player",
        "tags": ["Player"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the player to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Player successfully deleted"
          },
          "400": {
            "description": "Bad request, missing or invalid parameters"
          },
          "401": {
            "description": "Unauthorized, not logged in"
          },
          "403": {
            "description": "Forbidden, not authorized"
          },
          "404": {
            "description": "Player not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/player/all": {
      "get": {
        "tags": ["Player"],
        "summary": "Retrieve all players",
        "parameters": [
          {
            "in": "query",
            "name": "customization",
            "schema": {
              "type": "boolean"
            },
            "description": "If true, includes additional player customization details"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all players",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "players": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/player/group": {
      "get": {
        "tags": ["Player"],
        "summary": "Retrieve players by group",
        "parameters": [
          {
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["user", "verifier", "admin", "suspended", "unclaimed"]
            },
            "description": "The group of players to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "List of players in the specified group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Player"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid group or missing parameter"
          }
        }
      }
    },
    "/player/stats": {
      "get": {
        "tags": ["Player"],
        "summary": "Retrieve player statistics",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the player to get statistics for."
          }
        ],
        "responses": {
          "200": {
            "description": "Player statistics including count by difficulty",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count_by_difficulty": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "A mapping of difficulty IDs to the count of submissions."
                    },
                    "count_total_hard_list": {
                      "type": "integer",
                      "description": "Total count of tiered submissions."
                    },
                    "count_total_standard_list": {
                      "type": "integer",
                      "description": "Total count of standard submissions."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid player ID"
          }
        }
      }
    },
    "/player/submissions": {
      "get": {
        "tags": ["Player"],
        "summary": "Retrieve submissions for a specific player",
        "parameters": [
          {
            "in": "query",
            "name": "player_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the player to get the submissions for."
          },
          {
            "in": "query",
            "name": "archived",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to include archived maps in the results."
          },
          {
            "in": "query",
            "name": "arbitrary",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to include arbitrary challenges in the results."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of verified submissions for the specified player",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submission"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid `player_id`"
          }
        }
      }
    },
    "/objective": {
      "get": {
        "tags": ["Objective"],
        "summary": "Retrieve an objective or a list of objectives",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the objective to retrieve, or \"all\" to retrieve all objectives."
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the requested objective(s)",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Objective"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Objective"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing `id` parameter"
          },
          "404": {
            "description": "Objective not found if an ID was provided and it did not exist"
          }
        }
      }
    },
    "/objective/submission-count": {
      "get": {
        "tags": ["Objective"],
        "summary": "Retrieve the count of verified submissions for objectives",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": ["campaign", "player"]
            },
            "description": "Type of the filter. Use \"campaign\" to filter by campaign ID or \"player\" to filter by player ID."
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "description": "The ID of the campaign or player to filter by."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary mapping objective IDs to the count of verified submissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "description": "The count of verified submissions for the corresponding objective ID."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing `type` or `id` parameter"
          }
        }
      }
    },
    "/difficulty": {
      "get": {
        "tags": ["Difficulty"],
        "summary": "Retrieve a difficulty or a list of difficulties",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the difficulty to retrieve. Use \"all\" to retrieve all difficulties."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of difficulty objects or a single difficulty object if an ID is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Difficulty"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing `id` parameter."
          }
        }
      }
    },
    "/suggestion": {
      "get": {
        "tags": ["Suggestion"],
        "summary": "Retrieve a suggestion",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the suggestion to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "The requested suggestion object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Suggestion"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid `id` parameter."
          },
          "404": {
            "description": "Suggestion not found."
          }
        }
      },
      "post": {
        "tags": ["Suggestion"],
        "summary": "Create or update a suggestion",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Suggestion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created or updated suggestion object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Suggestion"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors or missing parameters."
          },
          "403": {
            "description": "Unauthorized access or action."
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": ["Suggestion"],
        "summary": "Delete a suggestion",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the suggestion to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Suggestion successfully deleted."
          },
          "400": {
            "description": "Missing or invalid `id` parameter."
          },
          "403": {
            "description": "Unauthorized access or action."
          },
          "404": {
            "description": "Suggestion not found."
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/suggestion/vote": {
      "get": {
        "tags": ["Suggestion"],
        "summary": "Retrieve votes for a suggestion",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the suggestion to retrieve votes for."
          },
          {
            "in": "query",
            "name": "depth",
            "schema": {
              "type": "integer",
              "default": 2
            },
            "description": "The depth of related data to include in the response."
          }
        ],
        "responses": {
          "200": {
            "description": "List of votes for the suggestion.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SuggestionVote"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid `id` parameter."
          },
          "404": {
            "description": "Suggestion not found."
          }
        }
      },
      "post": {
        "tags": ["Suggestion"],
        "summary": "Cast a vote on a suggestion",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestionVote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created vote object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestionVote"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors or duplicate vote."
          },
          "403": {
            "description": "Unauthorized action."
          },
          "404": {
            "description": "Suggestion does not exist."
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": ["Suggestion"],
        "summary": "Remove a vote from a suggestion",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the vote to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vote successfully deleted."
          },
          "400": {
            "description": "Missing or invalid `id` parameter."
          },
          "403": {
            "description": "Unauthorized action or attempt to delete another user's vote."
          },
          "404": {
            "description": "Vote not found."
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/suggestion/paginated": {
      "get": {
        "tags": ["Suggestion"],
        "summary": "Retrieve a paginated list of suggestions",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "The page number to retrieve."
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 1
            },
            "description": "The number of suggestions per page."
          },
          {
            "in": "query",
            "name": "challenge",
            "schema": {
              "type": "integer"
            },
            "description": "Optional filter for the challenge ID to filter suggestions by."
          },
          {
            "in": "query",
            "name": "expired",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional filter for expired suggestions. If true, only shows non-expired suggestions; if false, only shows expired suggestions."
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of suggestions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSuggestions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters."
          }
        }
      }
    },
    "/change": {
      "get": {
        "tags": ["Change"],
        "summary": "Retrieve all changes for a specific object",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["campaign", "map", "challenge", "player"]
            },
            "description": "The type of the object to retrieve changes for."
          },
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the object to retrieve changes for."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of changes for the specified object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Change"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameters."
          }
        }
      },
      "delete": {
        "tags": ["Change"],
        "summary": "Delete a change",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the change to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Change deleted successfully."
          },
          "400": {
            "description": "Invalid or missing parameters."
          },
          "403": {
            "description": "Not authorized to delete the change."
          },
          "404": {
            "description": "Change not found."
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/change/paginated": {
      "get": {
        "tags": ["Change"],
        "summary": "Retrieve paginated changes for a specific object type",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["campaign", "map", "challenge", "player", "all"]
            },
            "description": "The type of the object to retrieve changes for."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The page number to retrieve."
          },
          {
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "The number of changes to retrieve per page."
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of changes for the specified object type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChanges"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameters."
          }
        }
      }
    },
    "/showcase": {
      "get": {
        "tags": ["Showcase"],
        "summary": "Retrieve player showcase submissions",
        "parameters": [
          {
            "in": "query",
            "name": "player_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the player to retrieve the showcase for."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of player showcase submissions and the type of showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShowcaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid player_id parameter."
          },
          "404": {
            "description": "Player not found."
          }
        }
      },
      "post": {
        "tags": ["Showcase"],
        "summary": "Update player showcase submissions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          },
          "description": "An array of submission IDs to set as the player's showcase."
        },
        "responses": {
          "200": {
            "description": "Successfully updated the player showcase submissions. Returned array will be cleaned of invalid and unallowed submissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submission"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid submission IDs."
          },
          "403": {
            "description": "Unauthorized to update showcase submissions."
          },
          "404": {
            "description": "Submission not found."
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/lists/golden-list": {
      "get": {
        "tags": ["Lists"],
        "summary": "Retrieve a list of verified submissions based on various filters,  sorted into their campaigns.",
        "parameters": [
          {
            "in": "query",
            "name": "campaign",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by campaign ID."
          },
          {
            "in": "query",
            "name": "map",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by map ID."
          },
          {
            "in": "query",
            "name": "challenge",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by challenge ID."
          },
          {
            "in": "query",
            "name": "player",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by player ID."
          },
          {
            "in": "query",
            "name": "verifier",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by verifier ID."
          },
          {
            "in": "query",
            "name": "hard",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter for submissions with challenge difficulty less than 18."
          },
          {
            "in": "query",
            "name": "standard",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter for submissions with challenge difficulty equal to 18."
          },
          {
            "in": "query",
            "name": "undetermined",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter for submissions with challenge difficulty equal to 19."
          },
          {
            "in": "query",
            "name": "archived",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter for non-archived maps (default is false)."
          },
          {
            "in": "query",
            "name": "arbitrary",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter for non-arbitrary objectives and challenges (default is false)."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of verified submissions based on the applied filters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Campaign"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lists/top-golden-list": {
      "get": {
        "tags": ["Lists"],
        "summary": "Retrieve the top golden list based on various filters.",
        "parameters": [
          {
            "in": "query",
            "name": "all_submissions",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to include all submissions for all challenges. If false, will only send the first submission for all challenges."
          },
          {
            "in": "query",
            "name": "campaign",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by campaign ID."
          },
          {
            "in": "query",
            "name": "map",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by map ID."
          },
          {
            "in": "query",
            "name": "player",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by player ID."
          },
          {
            "in": "query",
            "name": "archived",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether archived maps should be included."
          },
          {
            "in": "query",
            "name": "arbitrary",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether arbitrary challenges should be included."
          },
          {
            "in": "query",
            "name": "hide_objectives",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "List of objective IDs to exclude from the search."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of top verified submissions based on the applied filters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopGoldenListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": ["Search"],
        "summary": "Search players, campaigns, maps, and authors by name.",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "description": "The search query string. If the query is only 1 or 2 characters long, only exact matches will be returned.",
            "required": true
          },
          {
            "in": "query",
            "name": "in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["players", "campaigns", "maps", "authors"]
              },
              "default": ["players", "campaigns", "maps", "authors"]
            },
            "description": "The types of data to search in."
          }
        ],
        "responses": {
          "200": {
            "description": "Search results based on the query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid search parameter."
          }
        }
      }
    },
    "/stats/global": {
      "get": {
        "tags": ["Stats"],
        "summary": "Retrieve global difficulty stats and count of campaigns, maps, challenges, submissions and players.",
        "parameters": [
          {
            "in": "query",
            "name": "month",
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}$"
            },
            "description": "Optional month filter in the format YYYY-MM."
          }
        ],
        "responses": {
          "200": {
            "description": "Global statistics based on the query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStatsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid month parameter."
          }
        }
      }
    },
    "/stats/monthly-recap": {
      "get": {
        "tags": ["Stats"],
        "summary": "Retrieve a monthly recap including tier clears, T0 submissions, newly cleared T3 challenges, and challenge changes.",
        "parameters": [
          {
            "in": "query",
            "name": "month",
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}$"
            },
            "description": "Month to filter the statistics, in the format YYYY-MM.",
            "required": true
          },
          {
            "in": "query",
            "name": "all_clears_tier_sort",
            "schema": {
              "type": "integer",
              "minimum": 7,
              "maximum": 19,
              "default": 17
            },
            "description": "Minimum difficulty sort value for all clears."
          },
          {
            "in": "query",
            "name": "first_clears_tier_sort",
            "schema": {
              "type": "integer",
              "minimum": 3,
              "maximum": 19,
              "default": 7
            },
            "description": "Minimum difficulty sort value for first clears."
          }
        ],
        "responses": {
          "200": {
            "description": "Monthly recap statistics based on the query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthlyRecapResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters."
          }
        }
      }
    },
    "/stats/verifier-tools": {
      "get": {
        "tags": ["Stats"],
        "summary": "Stats for verifiers.",
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Verifier tool statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifierToolsResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in."
          },
          "403": {
            "description": "User is not authorized."
          }
        }
      }
    },
    "/stats/monthly-tier-clears": {
      "get": {
        "tags": ["Stats"],
        "summary": "Retrieve monthly clears for each difficulty tier.",
        "responses": {
          "200": {
            "description": "Monthly tier clear statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthlyTierClearsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stats/player-tier-clear-counts": {
      "get": {
        "tags": ["Stats"],
        "summary": "Retrieve the count of clears for each difficulty tier for all players.",
        "responses": {
          "200": {
            "description": "Player tier clear counts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerTierClearCountsResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Campaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the campaign"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "description": "Name of the campaign"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the campaign"
          },
          "date_added": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the campaign was added"
          },
          "icon_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the campaign icon"
          },
          "sort_major_name": {
            "type": "string",
            "maxLength": 32,
            "description": "Major sort category name"
          },
          "sort_major_labels": {
            "type": "string",
            "description": "Labels for the major sort category"
          },
          "sort_major_colors": {
            "type": "string",
            "description": "Colors for the major sort category"
          },
          "sort_minor_name": {
            "type": "string",
            "maxLength": 32,
            "description": "Minor sort category name"
          },
          "sort_minor_labels": {
            "type": "string",
            "description": "Labels for the minor sort category"
          },
          "sort_minor_colors": {
            "type": "string",
            "description": "Colors for the minor sort category"
          },
          "author_gb_id": {
            "type": "integer",
            "description": "ID of the author on GameBanana"
          },
          "author_gb_name": {
            "type": "string",
            "maxLength": 128,
            "description": "Name of the author on GameBanana"
          },
          "maps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Map"
            }
          },
          "challenges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Challenge"
            }
          }
        }
      },
      "Map": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the map"
          },
          "campaign_id": {
            "type": "integer",
            "description": "Identifier for the associated campaign"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "description": "Name of the map"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the map"
          },
          "date_added": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the map was added"
          },
          "has_fc": {
            "type": "boolean",
            "description": "Indicates if the map has a full clear",
            "default": false
          },
          "is_rejected": {
            "type": "boolean",
            "description": "Indicates if the map is rejected",
            "default": false
          },
          "rejection_reason": {
            "type": "string",
            "description": "Reason for map rejection"
          },
          "is_archived": {
            "type": "boolean",
            "description": "Indicates if the map is archived",
            "default": false
          },
          "sort_major": {
            "type": "integer",
            "description": "Major sort order"
          },
          "sort_minor": {
            "type": "integer",
            "description": "Minor sort order"
          },
          "sort_order": {
            "type": "integer",
            "description": "Sort order"
          },
          "author_gb_id": {
            "type": "integer",
            "description": "ID of the author on GameBanana"
          },
          "author_gb_name": {
            "type": "string",
            "maxLength": 128,
            "description": "Name of the author on GameBanana"
          },
          "challenges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Challenge"
            }
          }
        }
      },
      "Challenge": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the challenge"
          },
          "campaign_id": {
            "type": "integer",
            "description": "Identifier for the associated campaign"
          },
          "map_id": {
            "type": "integer",
            "description": "Identifier for the associated map"
          },
          "objective_id": {
            "type": "integer",
            "description": "Identifier for the associated objective"
          },
          "label": {
            "type": "string",
            "description": "Label for the challenge"
          },
          "description": {
            "type": "string",
            "description": "Description of the challenge"
          },
          "difficulty_id": {
            "type": "integer",
            "description": "Identifier for the difficulty level"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the challenge was created"
          },
          "requires_fc": {
            "type": "boolean",
            "description": "Indicates if the challenge requires a full clear",
            "default": false
          },
          "has_fc": {
            "type": "boolean",
            "description": "Indicates if the challenge has an optional full clear",
            "default": false
          },
          "is_arbitrary": {
            "type": "boolean",
            "description": "Indicates if the challenge is arbitrary"
          },
          "sort": {
            "type": "integer",
            "description": "Sort order of the challenge"
          },
          "data": {
            "type": "object",
            "description": "Additional data array. Only certain endpoints use this.",
            "properties": {
              "submission_count": {
                "type": "integer",
                "description": "Count of submissions in the challenge. Available in all endpoints that need the count of submissions, but don't send *all* submissions."
              }
            }
          },
          "submissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submission"
            }
          }
        }
      },
      "Submission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the submission"
          },
          "challenge_id": {
            "type": "integer",
            "description": "Identifier for the associated challenge"
          },
          "player_id": {
            "type": "integer",
            "description": "Identifier for the player"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the submission was created"
          },
          "is_fc": {
            "type": "boolean",
            "description": "Indicates if the submission is a full clear",
            "default": false
          },
          "proof_url": {
            "type": "string",
            "description": "URL to the proof of the submission"
          },
          "raw_session_url": {
            "type": "string",
            "description": "URL to the raw session video"
          },
          "player_notes": {
            "type": "string",
            "description": "Notes from the player about the submission"
          },
          "suggested_difficulty_id": {
            "type": "integer",
            "description": "Identifier of the difficulty the player is suggesting for the challenge"
          },
          "is_personal": {
            "type": "boolean",
            "description": "Indicates if the difficulty suggestion is personal and should not be used for difficulty placement",
            "default": false
          },
          "is_verified": {
            "type": "boolean",
            "description": "Indicates if the submission is verified"
          },
          "date_verified": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the submission was verified"
          },
          "verifier_notes": {
            "type": "string",
            "description": "Notes from the verifier about the submission"
          },
          "verifier_id": {
            "type": "integer",
            "description": "Identifier for the verifier"
          },
          "new_challenge_id": {
            "type": "integer",
            "description": "Identifier for the new challenge attached to this submission"
          }
        }
      },
      "Player": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the player"
          },
          "name": {
            "type": "string",
            "description": "Name of the player"
          },
          "account": {
            "type": "object",
            "properties": {
              "is_verifier": {
                "type": "boolean",
                "description": "Whether the player is a verifier"
              },
              "is_admin": {
                "type": "boolean",
                "description": "Whether the player is an admin"
              },
              "is_suspended": {
                "type": "boolean",
                "description": "Whether the player is suspended"
              },
              "suspension_reason": {
                "type": "string",
                "description": "Reason for suspension, if applicable"
              },
              "name_color_start": {
                "type": "string",
                "description": "Starting color code for the player's name"
              },
              "name_color_end": {
                "type": "string",
                "description": "Ending color code for the player's name"
              },
              "links": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "User-defined links from the player (Customization)"
              },
              "input_method": {
                "type": "string",
                "description": "Input method used by the player (Customization)"
              },
              "about_me": {
                "type": "string",
                "description": "Description about the player (Customization)"
              }
            }
          }
        }
      },
      "Objective": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the objective"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "description": "Name of the objective"
          },
          "description": {
            "type": "string",
            "description": "Description of the objective"
          },
          "display_name_suffix": {
            "type": "string",
            "maxLength": 32,
            "description": "Suffix to display with the name"
          },
          "is_arbitrary": {
            "type": "boolean",
            "description": "Indicates if the objective is arbitrary",
            "default": false
          },
          "icon_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the objective icon"
          }
        }
      },
      "Difficulty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the difficulty level"
          },
          "name": {
            "type": "string",
            "maxLength": 32,
            "description": "Name of the difficulty level"
          },
          "subtier": {
            "type": "string",
            "enum": ["high", "mid", "low", "guard"],
            "description": "Subtier of the difficulty level"
          },
          "sort": {
            "type": "integer",
            "description": "Sort order of the difficulty level"
          }
        }
      },
      "NewChallenge": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the new challenge"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "GameBanana URL of the new challenge"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "description": "Map name of the new challenge"
          },
          "description": {
            "type": "string",
            "description": "Description of the new challenge"
          }
        }
      },
      "Suggestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the suggestion"
          },
          "author_id": {
            "type": "integer",
            "description": "Identifier for the author (player)"
          },
          "challenge_id": {
            "type": "integer",
            "description": "Identifier for the associated challenge"
          },
          "current_difficulty_id": {
            "type": "integer",
            "description": "Identifier for the challenge difficulty at the time of creation"
          },
          "suggested_difficulty_id": {
            "type": "integer",
            "description": "Identifier for the suggested difficulty"
          },
          "comment": {
            "type": "string",
            "description": "Comment about the suggestion"
          },
          "is_verified": {
            "type": "boolean",
            "description": "Indicates if the suggestion is verified"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the suggestion was created"
          },
          "is_accepted": {
            "type": "boolean",
            "description": "Indicates if the suggestion is accepted"
          },
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestionVote"
            }
          }
        }
      },
      "SuggestionVote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the suggestion vote"
          },
          "suggestion_id": {
            "type": "integer",
            "description": "Identifier for the associated suggestion"
          },
          "player_id": {
            "type": "integer",
            "description": "Identifier for the player voting"
          },
          "vote": {
            "type": "string",
            "enum": ["+", "-", "i"],
            "description": "Vote value"
          },
          "comment": {
            "type": "string",
            "description": "Comment about the vote"
          }
        }
      },
      "Change": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the change"
          },
          "campaign_id": {
            "type": "integer",
            "description": "Identifier for the associated campaign"
          },
          "map_id": {
            "type": "integer",
            "description": "Identifier for the associated map"
          },
          "challenge_id": {
            "type": "integer",
            "description": "Identifier for the associated challenge"
          },
          "player_id": {
            "type": "integer",
            "description": "Identifier for the player"
          },
          "author_id": {
            "type": "integer",
            "description": "Identifier for the author"
          },
          "description": {
            "type": "string",
            "description": "Description of the change"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the change was made"
          }
        }
      },
      "Showcase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the showcase"
          },
          "index": {
            "type": "integer",
            "description": "Index position in the showcase"
          },
          "account_id": {
            "type": "integer",
            "description": "Identifier for the associated account"
          },
          "submission_id": {
            "type": "integer",
            "description": "Identifier for the associated submission"
          }
        }
      },
      "ShowcaseResponse": {
        "type": "object",
        "properties": {
          "submissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submission"
            },
            "description": "A list of submissions in the player's showcase."
          },
          "type": {
            "type": "string",
            "description": "The type of showcase (`custom` or `hardest`)."
          }
        }
      },
      "PaginatedChallenges": {
        "type": "object",
        "properties": {
          "max_count": {
            "type": "integer",
            "description": "The total number of challenges available"
          },
          "max_page": {
            "type": "integer",
            "description": "The total number of pages available"
          },
          "page": {
            "type": "integer",
            "description": "The current page number"
          },
          "per_page": {
            "type": "integer",
            "description": "The number of challenges per page"
          },
          "challenges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Challenge"
            }
          }
        }
      },
      "PaginatedSubmissions": {
        "type": "object",
        "properties": {
          "max_count": {
            "type": "integer",
            "description": "The total number of submissions available"
          },
          "max_page": {
            "type": "integer",
            "description": "The total number of pages available"
          },
          "page": {
            "type": "integer",
            "description": "The current page number"
          },
          "per_page": {
            "type": "integer",
            "description": "The number of submissions per page"
          },
          "submissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submission"
            }
          }
        }
      },
      "PaginatedSuggestions": {
        "type": "object",
        "properties": {
          "max_count": {
            "type": "integer",
            "description": "The total number of submissions available"
          },
          "max_page": {
            "type": "integer",
            "description": "The total number of pages available"
          },
          "page": {
            "type": "integer",
            "description": "The current page number"
          },
          "per_page": {
            "type": "integer",
            "description": "The number of submissions per page"
          },
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Suggestion"
            }
          }
        }
      },
      "PaginatedChanges": {
        "type": "object",
        "properties": {
          "max_count": {
            "type": "integer",
            "description": "The total number of submissions available"
          },
          "max_page": {
            "type": "integer",
            "description": "The total number of pages available"
          },
          "page": {
            "type": "integer",
            "description": "The current page number"
          },
          "per_page": {
            "type": "integer",
            "description": "The number of submissions per page"
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          }
        }
      },
      "TopGoldenListResponse": {
        "type": "object",
        "properties": {
          "tiers": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/Difficulty"
              }
            }
          },
          "challenges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Challenge"
            }
          },
          "campaigns": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Campaign"
            }
          },
          "maps": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Map"
            }
          }
        }
      },
      "SearchAuthor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the author."
          },
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Campaign"
            }
          },
          "maps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Map"
            }
          }
        }
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string",
            "description": "The search query string."
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            }
          },
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Campaign"
            }
          },
          "maps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Map"
            }
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchAuthor"
            }
          }
        }
      },
      "GlobalStats": {
        "type": "object",
        "properties": {
          "campaigns": {
            "type": "integer",
            "description": "Total number of campaigns."
          },
          "maps": {
            "type": "integer",
            "description": "Total number of maps."
          },
          "challenges": {
            "type": "integer",
            "description": "Total number of challenges."
          },
          "submissions": {
            "type": "integer",
            "description": "Total number of submissions."
          },
          "players": {
            "type": "integer",
            "description": "Total number of players."
          },
          "real_campaigns": {
            "type": "integer",
            "description": "Total number of real campaigns (campaigns with more than one map)."
          }
        }
      },
      "DifficultyStats": {
        "type": "object",
        "additionalProperties": {
          "type": "integer"
        },
        "description": "A mapping of difficulty IDs to their respective submission counts."
      },
      "GlobalStatsResponse": {
        "type": "object",
        "properties": {
          "overall": {
            "$ref": "#/components/schemas/GlobalStats"
          },
          "difficulty": {
            "$ref": "#/components/schemas/DifficultyStats"
          }
        }
      },
      "MonthlyRecapResponse": {
        "type": "object",
        "properties": {
          "tier_clears": {
            "$ref": "#/components/schemas/DifficultyStats"
          },
          "submissions_t0": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submission"
            }
          },
          "newly_cleared_t3": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Challenge"
            }
          },
          "challenge_changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          }
        }
      },
      "VerifierToolsResponse": {
        "type": "object",
        "properties": {
          "submissions_in_queue": {
            "type": "integer",
            "description": "Number of submissions in the verification queue."
          },
          "open_player_claims": {
            "type": "integer",
            "description": "Number of open player claims."
          },
          "pending_suggestions": {
            "type": "integer",
            "description": "Number of pending suggestions."
          }
        }
      },
      "MonthlyTierClearsResponse": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "difficulty_id": {
                "type": "integer",
                "description": "The ID of the difficulty tier."
              },
              "count": {
                "type": "integer",
                "description": "The count of clears for the difficulty tier in that month."
              }
            }
          }
        },
        "examples": [
          {
            "Sat Jun 01 2024 02:00:00 GMT+0200 (Central European Summer Time)": {
              "1": 1,
              "2": 2,
              "4": 4,
              "5": 7
            },
            "Mon Jul 01 2024 02:00:00 GMT+0200 (Central European Summer Time)": {
              "1": 1,
              "2": 2,
              "4": 4,
              "5": 7
            }
          }
        ]
      },
      "PlayerTierClearCountsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "player": {
              "$ref": "#/components/schemas/Player"
            },
            "clears": {
              "type": "object",
              "properties": {
                "2": {
                  "type": "integer",
                  "description": "Tier 0 clear count."
                },
                "5": {
                  "type": "integer",
                  "description": "Tier 1 clear count."
                },
                "8": {
                  "type": "integer",
                  "description": "Tier 2 clear count."
                },
                "11": {
                  "type": "integer",
                  "description": "Tier 3 clear count."
                },
                "14": {
                  "type": "integer",
                  "description": "Tier 4 clear count."
                },
                "15": {
                  "type": "integer",
                  "description": "Tier 5 clear count."
                },
                "16": {
                  "type": "integer",
                  "description": "Tier 6 clear count."
                },
                "17": {
                  "type": "integer",
                  "description": "Tier 7 clear count."
                },
                "18": {
                  "type": "integer",
                  "description": "Standard clear count."
                }
              }
            },
            "total": {
              "type": "integer",
              "description": "Total clear count for the player."
            }
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "description": "An API key is necessary to perform certain tasks restricted to logged-in users or verifiers",
        "name": "goldberries_api_key",
        "in": "header"
      }
    }
  }
}
